name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
    paths:
      - 'front/**'    # 프론트엔드 파일이 변경된 경우
      - 'build.gradle' # 백엔드의 Gradle 파일이 변경된 경우
      - 'src/**'       # 백엔드 소스 코드가 변경된 경우

jobs:
  # 프론트엔드 빌드 작업 (변경 사항 있을 때만 실행)
  build_frontend:
    if: contains(github.event.head_commit.message, 'frontend') || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      # Node.js 설치 및 의존성 캐시 적용
      - name: node_modules 캐싱
        uses: actions/cache@v2
        with:
          path: front/node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Node.js 설치
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: 의존성 설치 및 빌드
        run: |
          cd front
          npm install
          CI=false npm run build
        env:
          REACT_APP_API_ROOT: ${{ secrets.REACT_APP_API_ROOT }}
          REACT_APP_HOME_URL: ${{ secrets.REACT_APP_HOME_URL }}

      - name: 타겟 디렉터리 준비
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            sudo mkdir -p /var/www/html
            sudo chown -R ubuntu:ubuntu /var/www/html
            sudo chmod -R 755 /var/www/html

      - name: React 빌드 파일을 EC2로 복사
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: front/build/
          target: /var/www/html
          overwrite: true

  # 백엔드 빌드 작업 (변경 사항 있을 때만 실행)
  build_backend:
    if: contains(github.event.head_commit.message, 'backend') || github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      # Gradle 캐시 적용
      - name: Gradle 캐시 적용
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: gradlew 파일 실행 권한 부여
        run: chmod +x ./gradlew

      - name: Gradle 빌드 (테스트 제외)
        run: ./gradlew build
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_SECRET_KEY: ${{ secrets.NAVER_SECRET_KEY }}
          NAVER_REDIRECT_URL: ${{ secrets.NAVER_REDIRECT_URL }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URL: ${{ secrets.KAKAO_REDIRECT_URL }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: JAR 파일을 서버로 전송
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: build/libs/TransferStay-0.0.1-SNAPSHOT.jar
          target: /home/ubuntu

  # 배포 작업 (프론트엔드와 백엔드 빌드 완료 시 실행)
  deploy:
    needs: [build_frontend, build_backend]
    runs-on: ubuntu-latest

    steps:
      - name: 이전 JAR 프로세스 종료
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/ubuntu/build/libs/
            JAR_PATH=TransferStay-0.0.1-SNAPSHOT.jar
            
            PID=$(pgrep -f "$JAR_PATH")
            
            if [ -n "$PID" ] && [ "$PID" -gt 1 ]; then
              echo "이전 프로세스($PID)가 실행 중입니다. 종료합니다."
              kill "$PID"
              sleep 20
            else
              echo "실행 중인 프로세스가 없습니다."
            fi
