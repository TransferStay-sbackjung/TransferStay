name: CI/CD Pipeline

on:
  push:
    branches:
      - develop  # 나중에 main 브랜치로 변경 예정

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # GitHub 저장소에서 코드 가져오기
      - name: Checkout code
        uses: actions/checkout@v3  # 최신 버전 사용

      # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # 최신 버전 사용
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 캐시 적용 (빌드 최적화)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle Wrapper 실행 권한 부여
      - name: Grant execute permission for Gradle Wrapper
        run: chmod +x ./gradlew

      # Gradle 빌드 실행 (테스트 제외)
      - name: Build with Gradle
        run: ./gradlew build -x test  # 테스트 제외하고 빌드

      # 빌드된 JAR 파일에 실행 권한 부여
      - name: Grant execute permission for JAR
        run: chmod +x build/libs/*.jar  # 가장 최신 빌드된 JAR 파일에 권한 부여

      # 권한이 부여된 JAR 파일을 EC2로 복사
      - name: Copy JAR to EC2
        uses: appleboy/scp-action@v0.1.0  # 버전 명시
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: build/libs/*.jar  # 가장 최근에 빌드된 JAR 파일 자동으로 선택
          target: /home/ubuntu/

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: EC2에 SSH 연결 후 JAR 실행
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            set -x  # 디버그 모드 활성화
            cd /home/ubuntu/
            source ~/.bash_profile
            echo "현재 디렉토리: $(pwd)"
            echo "Java 버전: $(java -version)"
            
            # JAR 파일 경로 설정 (최신 JAR 파일을 자동으로 찾음)
            JAR_PATH=$(ls -t /home/ubuntu/*.jar | head -n 1)
            
            # 기존 JAR 프로세스 종료
            echo "기존 애플리케이션 종료 중..."
            if pgrep -f "$JAR_PATH"; then
              echo "이전 프로세스가 실행 중입니다. 종료합니다."
              pkill -f "$JAR_PATH"
            else
              echo "실행 중인 이전 프로세스가 없습니다."
            fi

            # 프로세스 종료가 완료되었는지 확인
            if pgrep -f "$JAR_PATH"; then
              echo "프로세스가 아직 종료되지 않았습니다. 강제 종료합니다."
              pkill -9 -f "$JAR_PATH"
            else
              echo "이전 프로세스 종료가 완료되었습니다."
            fi

            # 새로운 JAR 파일 실행 및 로그 저장
            echo "새로운 애플리케이션 시작 중..."
            if [ -f "$JAR_PATH" ]; then
              chmod +x "$JAR_PATH"
              nohup java -jar "$JAR_PATH" > app.log 2>&1 &
            else
              echo "JAR 파일을 찾을 수 없습니다!"
              exit 1
            fi

            # 프로세스 시작 확인
            sleep 10
            if pgrep -f "$JAR_PATH"; then
              echo "새 프로세스가 성공적으로 시작되었습니다."
              echo "프로세스 세부 정보:"
              ps aux | grep "$JAR_PATH"
            else
              echo "새 프로세스 시작에 실패했습니다."
              echo "app.log 파일의 내용:"
              tail -n 50 app.log
              exit 1
            fi

            # 로그 파일 크기 관리 (기본 10MB 이상일 경우 삭제)
            LOG_FILE="/home/ubuntu/app.log"
            MAX_LOG_SIZE=10485760  # 10MB

            if [ -f "$LOG_FILE" ]; then
              LOG_SIZE=$(stat -c%s "$LOG_FILE")
              if [ "$LOG_SIZE" -gt "$MAX_LOG_SIZE" ]; then
                echo "로그 파일이 너무 큽니다. 로그를 백업하고 새 파일을 생성합니다."
                mv "$LOG_FILE" "$LOG_FILE.bak"
                touch "$LOG_FILE"
              fi
            fi
